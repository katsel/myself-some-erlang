$ erl
Erlang/OTP 18 [erts-7.3.1] [source] [64-bit] [smp:4:4] [async-threads:10] [hipe] [kernel-poll:false]

Eshell V7.3.1  (abort with ^G)
1> lists:
all/2          any/2          append/1       append/2       concat/1       
delete/2       droplast/1     dropwhile/2    duplicate/2    filter/2       
filtermap/2    flatlength/1   flatmap/2      flatten/1      flatten/2      
foldl/3        foldr/3        foreach/2      keydelete/3    keyfind/3      
keymap/3       keymember/3    keymerge/3     keyreplace/4   keysearch/3    
keysort/2      keystore/4     keytake/3      last/1         map/2          
mapfoldl/3     mapfoldr/3     max/1          member/2       merge/1        
merge/2        merge/3        merge3/3       min/1          module_info/0  
module_info/1  nth/2          nthtail/2      partition/2    prefix/2       
reverse/1      reverse/2      rkeymerge/3    rmerge/2       rmerge/3       
rmerge3/3      rukeymerge/3   rumerge/2      rumerge/3      rumerge3/3     
seq/2          seq/3          sort/1         sort/2         split/2        
splitwith/2    sublist/2      sublist/3      subtract/2     suffix/2       
sum/1          takewhile/2    ukeymerge/3    ukeysort/2     umerge/1       
umerge/2       umerge/3       umerge3/3      unzip/1        unzip3/1       
usort/1        usort/2        zf/2           zip/2          zip3/3         
zipwith/3      zipwith3/4     
1> help()
1> help().
* 2: syntax error before: help
1> help().
** shell internal commands **
b()        -- display all variable bindings
e(N)       -- repeat the expression in query <N>
f()        -- forget all variable bindings
f(X)       -- forget the binding of variable X
h()        -- history
history(N) -- set how many previous commands to keep
results(N) -- set how many previous command results to keep
catch_exception(B) -- how exceptions are handled
v(N)       -- use the value of query <N>
rd(R,D)    -- define a record
rf()       -- remove all record information
rf(R)      -- remove record information about R
rl()       -- display all record information
rl(R)      -- display record information about R
rp(Term)   -- display Term using the shell's record information
rr(File)   -- read record information from File (wildcards allowed)
rr(F,R)    -- read selected record information from file(s)
rr(F,R,O)  -- read selected record information with options
** commands in module c **
bt(Pid)    -- stack backtrace for a process
c(File)    -- compile and load code in <File>
cd(Dir)    -- change working directory
flush()    -- flush any messages sent to the shell
help()     -- help info
i()        -- information about the system
ni()       -- information about the networked system
i(X,Y,Z)   -- information about pid <X,Y,Z>
l(Module)  -- load or reload module
lc([File]) -- compile a list of Erlang modules
ls()       -- list files in the current directory
ls(Dir)    -- list files in directory <Dir>
m()        -- which modules are loaded
m(Mod)     -- information about module <Mod>
memory()   -- memory allocation information
memory(T)  -- memory allocation information of type <T>
nc(File)   -- compile and load code in <File> on all nodes
nl(Module) -- load module on all nodes
pid(X,Y,Z) -- convert X,Y,Z to a Pid
pwd()      -- print working directory
q()        -- quit - shorthand for init:stop()
regs()     -- information about registered processes
nregs()    -- information about all registered processes
uptime()   -- print node uptime
xm(M)      -- cross reference check a module
y(File)    -- generate a Yecc parser
** commands in module i (interpreter interface) **
ih()       -- print help for the i module
true
2> h  
2> help().
* 2: syntax error before: help
2> help().
** shell internal commands **
b()        -- display all variable bindings
e(N)       -- repeat the expression in query <N>
f()        -- forget all variable bindings
f(X)       -- forget the binding of variable X
h()        -- history
history(N) -- set how many previous commands to keep
results(N) -- set how many previous command results to keep
catch_exception(B) -- how exceptions are handled
v(N)       -- use the value of query <N>
rd(R,D)    -- define a record
rf()       -- remove all record information
rf(R)      -- remove record information about R
rl()       -- display all record information
rl(R)      -- display record information about R
rp(Term)   -- display Term using the shell's record information
rr(File)   -- read record information from File (wildcards allowed)
rr(F,R)    -- read selected record information from file(s)
rr(F,R,O)  -- read selected record information with options
** commands in module c **
bt(Pid)    -- stack backtrace for a process
c(File)    -- compile and load code in <File>
cd(Dir)    -- change working directory
flush()    -- flush any messages sent to the shell
help()     -- help info
i()        -- information about the system
ni()       -- information about the networked system
i(X,Y,Z)   -- information about pid <X,Y,Z>
l(Module)  -- load or reload module
lc([File]) -- compile a list of Erlang modules
ls()       -- list files in the current directory
ls(Dir)    -- list files in directory <Dir>
m()        -- which modules are loaded
m(Mod)     -- information about module <Mod>
memory()   -- memory allocation information
memory(T)  -- memory allocation information of type <T>
nc(File)   -- compile and load code in <File> on all nodes
nl(Module) -- load module on all nodes
pid(X,Y,Z) -- convert X,Y,Z to a Pid
pwd()      -- print working directory
q()        -- quit - shorthand for init:stop()
regs()     -- information about registered processes
nregs()    -- information about all registered processes
uptime()   -- print node uptime
xm(M)      -- cross reference check a module
y(File)    -- generate a Yecc parser
** commands in module i (interpreter interface) **
ih()       -- print help for the i module
true
3> q()
3> q()
3> 
User switch command
 --> q
:~$ erl
Erlang/OTP 18 [erts-7.3.1] [source] [64-bit] [smp:4:4] [async-threads:10] [hipe] [kernel-poll:false]

Eshell V7.3.1  (abort with ^G)
1> 
User switch command
 --> h
  c [nn]            - connect to job
  i [nn]            - interrupt job
  k [nn]            - kill job
  j                 - list all jobs
  s [shell]         - start local shell
  r [node [shell]]  - start remote shell
  q                 - quit erlang
  ? | h             - this message
 --> j
   1* {shell,start,[init]}
 --> 2+15
Unknown command
 --> 2+15.
Unknown command
 --> 2 + 15.
Unknown command
 --> 
 --> c1
Unknown command
 --> c 1

1> 2+15
1> 2+15.
* 3: syntax error before: 2
1> 2+15.
17
2> 49*1000.
49000
3> 1892 - 1472.
420
4> 5 / 2.
2.5
5> 5 div 2.
2
6> 5 rem 2. 
1
7> 5 div 2 + ( 5 rem 2) / 2
7> 5 div 2 + (5 rem 2) / 2.
* 2: syntax error before: 5
7> 5 div 2
7> 5 div 2.
* 2: syntax error before: 5
7> 5 div 2.
2
8> 5 div 2 + 1.
3
9> 5 div ( 2 + 1 ).
1
10> 5 div (2 + 1).
1
11> 5 div 2 + (5 rem 2 )/ 2
11> 5 div 2 + (5 rem 2) / 2.
* 2: syntax error before: 5
11> 5 div 2
11> 5 div 2.
* 2: syntax error before: 5
11> 5 div 2.
2
12> 5 div 2 + (5 rem 2) 
12> 5 div 2 + (5 rem 2).
* 2: syntax error before: 5
12> (5 rem 2).
1
13> 5 div 2 + (5 rem 2).
3
14> 5 div 2 + (5 rem 2) / 2.
2.5
15> 16#A
15> 16#A.
* 2: syntax error before: 10
15> 16#A.
10
16> One.
* 1: variable 'One' is unbound
17> One = 1.
1
18> Un = Uno = One = 1
18> Un = Uno = One = 1.
* 2: syntax error before: Un
18> Un = Uno = One = 1.
1
19> Two = One + One
19> .
2
20> Two
20> .
2
21> Two = Two + 1.
** exception error: no match of right hand side value 3
22> 48 = 45 + 3.
48
23> 48 = 45 + 2.
** exception error: no match of right hand side value 47
24> Un.
1
25> f(Un).
ok
26> Un.
* 1: variable 'Un' is unbound
27> atom.
atom
28> atom = btom.
** exception error: no match of right hand side value btom
29> atom = 'btom'.
** exception error: no match of right hand side value btom
30> true xor true.
false
31> 5 =:= 5.
true
32> 5 <= 5.
* 1: syntax error before: '<='
32> 5 => 5.
* 1: syntax error before: '=>'
32> 5 + llama.
** exception error: an error occurred when evaluating an arithmetic expression
     in operator  +/2
        called as 5 + llama
33> 5 =:= true.
false
34> 5 == true. 
false
35> 1 =:= true.
false
36> 5 =:= lama.
false
37> lama.
lama
38> 0 == false.
false
39> 0 =:= false.
false
40> 0 < false.
true
41> 0 > false.
false
42> 1 > false.
false
43> -1 > false.
false
44> 3 < false. 
true
45> Point = {4,5}.
{4,5}
46> {X,Y} = Point.
{4,5}
47> X.
4
48> Y.
5
49> {X,_} = Point.
{4,5}
50> Point.
{4,5}
51> X
51> .
4
52> Y.
5
53> _.
* 1: variable '_' is unbound
54> {X,Y} = {4,5}.
{4,5}
55> {4,5} = {4,5}.
{4,5}
56> {A,2} = {B,1}.
* 1: variable 'B' is unbound
57> {A,2} = {1,B}.
* 1: variable 'B' is unbound
58> {A,2} = {1,3}.
** exception error: no match of right hand side value {1,3}
59> {A,2} = {1,2}.
{1,2}
60> A
60> {1,B} = {A,2}.
* 2: syntax error before: '{'
60> {1,B} = {A,2}.
{1,2}
61> {1,C} = {D,2}.
* 1: variable 'D' is unbound
62> C
62> .
* 1: variable 'C' is unbound
63> Temperature = 23.123.
23.123
64> PreciseTemperature = {celsius, 23.213}.
{celsius,23.213}
65> {kelvin, T} = PreciseTemperature.
** exception error: no match of right hand side value {celsius,23.213}
66> {celsius, T} = PreciseTemperature.
{celsius,23.213}
67> T
67> .
23.213
68> T = Temperature.
** exception error: no match of right hand side value 23.123
69> Temperature
69> .
23.123
70> T == Temperature.
false
71> T =:= Temperature.
false
72> T.
23.213
73> Temperature.
23.123
74> f(T).
ok
75> PreciseTemperature = {celsius, 23.123}.
** exception error: no match of right hand side value {celsius,23.123}
76> f(PreciseTemperature).
ok
77> PreciseTemperature = {celsius, 23.123}.
{celsius,23.123}
78> T =:= Temperature.                     
* 1: variable 'T' is unbound
79> T = 23.123.
23.123
80> T =:= Temperature.
true
81> T == Temperature. 
true
82> [96, 97, 98].
"`ab"
83> [233].
"Ã©"
84> 99.
99
85> hd([1,2,3,4]).
1
86> tl([1,2,3,4]).
[2,3,4]
87> length([1,2,3,4]).
4
88> List = [2,3,4].
[2,3,4]
89> NewList = [1|List].
[1,2,3,4]
90> NewList.
[1,2,3,4]
91> NewList = [1,2|List].
** exception error: no match of right hand side value [1,2,2,3,4]
92> NewList2 = [1,2|List].
[1,2,2,3,4]
93> [Hd2|Tl2] = NewList2
93> .
[1,2,2,3,4]
94> Hd2.
1
95> Tl2.
[2,2,3,4]
96> ImproperList = [1|2].
[1|2]
97> ImproperList.
[1|2]
98> length(ImproperList).
** exception error: bad argument
     in function  length/1
        called as length([1|2])
99> length(ImproperList|[])
99> .
* 1: syntax error before: '|'
99> length([ImproperList|[]]).
1
100> MaybeProperList = [ImproperList|[]].
[[1|2]]
101> MaybeProperList2 = ImproperList ++ []. 
** exception error: bad argument
     in operator  ++/2
        called as [1|2] ++ []
102> MaybeProperList2 = [1,2] ++ [].       
[1,2]
103> MaybeProperList3 = [1,2] ++ [3].
[1,2,3]
104> [2*N || N <-[1,2,3,4,5,6,7,8]].
[2,4,6,8,10,12,14,16]
105> [N**2 || N <-[1,2,3,4,5,6,7,8]].
* 1: syntax error before: '*'
105> [N^2 || N <-[1,2,3,4,5,6,7,8]]. 
* 1: syntax error before: '^'
105> [N*N || N <-[1,2,3,4,5,6,7,8]].
[1,4,9,16,25,36,49,64]
106> pow(10).
** exception error: undefined shell command pow/1
107> [X || X <- [1,2,3,4,5,6,7,8,9,10], X rem 2 =:= 2].
[]
108> [X || X <- [1,2,3,4,5,6,7,8,9,10], X rem 2 =:= 2].
[]
109> [X || X <- [1,2,3,4,5,6,7,8,9,10], X rem 2 =:= 0].
[2,4,6,8,10]
110> [X || X <- [1,2,3,4,5,6,7,8,9,10], X rem 2 =:= 1].
[1,3,5,7,9]
111> RestaurantMenu = [{steak, 5.99}, {beer, 3.99}, {poutine, 3.50}, {kitten, 20.99}, {water, 0.00}].
[{steak,5.99},
 {beer,3.99},
 {poutine,3.5},
 {kitten,20.99},
 {water,0.0}]
112> [{Item, Price*1.07} || {item, Price} <- RestaurantMenu, Price >= 3, Price =< 10].
* 1: variable 'Item' is unbound
113> [{Item, Price*1.07} || {Item, Price} <- RestaurantMenu, Price >= 3, Price =< 10].
[{steak,6.409300000000001},{beer,4.2693},{poutine,3.745}]
114> [X+Y || X <- [1,2], Y <- [2,3]].
[3,4,4,5]
115> [X+Y || X <- [1,2], Y <- [3,4]].
[4,5,5,6]
116> [X+Y || X <- [1,2], Y <- [3,6]].
[4,7,5,8]
117> Weather = [{toronto, rain}, {montreal, storms}, {london, fog}, {paris, sun}, {boston, fog}, {vancouver, snow}].
[{toronto,rain},
 {montreal,storms},
 {london,fog},
 {paris,sun},
 {boston,fog},
 {vancouver,snow}]
118> FoggyPlaces = [X || {X, fog} <- Weather].
[london,boston]
119> Color = 16#F09A29
119> .
15768105
120> <<Color:24>>.
<<240,154,41>>
121> <<Color:3>>. 
<<1:3>>
122> <<Color:12>>.
<<162,9:4>>
123> <<Color:25>>.
<<120,77,20,1:1>>
124> <<Color:24>>.
<<240,154,41>>
125> Pixel = <<Color:24>>.
<<240,154,41>>
126> Pixels = <<213,45,132,64,76,32,76,0,0,234,32,15>>.
<<213,45,132,64,76,32,76,0,0,234,32,15>>
127> <<Pix1,Pix2,Pix3,Pix4>> = Pixels.
** exception error: no match of right hand side value <<213,45,132,64,76,32,76,
                                                        0,0,234,32,15>>
128> <<Pix1:24,Pix2:24,Pix3:24,Pix4:24>> = Pixels.
<<213,45,132,64,76,32,76,0,0,234,32,15>>
129> Pix1.
13970820
130> Pix2.
4213792
131> Pix1:24.
* 1: illegal expression
132> <<Pix1:24>>.
<<213,45,132>>
133> <<Pix2:24>>.
<<"@L ">>
134> [64,76,32]
134> .
"@L "
135> <<Pix3:24>>.
<<76,0,0>>
136> <<Pix4:24>>.
<<234,32,15>>
137> <<Pix5:24>>.
* 1: variable 'Pix5' is unbound
138> <<R:8, G:8, B:8>> = Pix1.
** exception error: no match of right hand side value 13970820
139> <<R:8, G:8, B:8>> = <<Pix1:24>>.
** exception error: no match of right hand side value <<213,45,132>>
140> <<R:8, G:8, B:8>> = <<Pix1:24>>.
** exception error: no match of right hand side value <<213,45,132>>
141> R.
* 1: variable 'R' is unbound
142> G.
* 1: variable 'G' is unbound
143> B.
2
144> f(B).
ok
145> <<R:8, G:8, B:8>> = <<Pix1:24>>.
<<213,45,132>>
146> R.
213
147> G.
45
148> B.
132
149> Pix1.
13970820
150> f(R).
ok
151> <<R:8, Rest/binary>> = Pixels.
<<213,45,132,64,76,32,76,0,0,234,32,15>>
152> R.
213
153> Rest.
<<45,132,64,76,32,76,0,0,234,32,15>>
154> <<Pixels:24>>
154> .
** exception error: bad argument
155> <<Pixels>>   
155> .
** exception error: bad argument
156> Pixels.
<<213,45,132,64,76,32,76,0,0,234,32,15>>
157> f(R).
ok
158> <<R:8, _/binary>> = Pixels.   
<<213,45,132,64,76,32,76,0,0,234,32,15>>
159> R.
213
160> Rest.
<<45,132,64,76,32,76,0,0,234,32,15>>
161> Pixels.
<<213,45,132,64,76,32,76,0,0,234,32,15>>
162> <<X1/unsigned>> = <<-44>>  
162> .
<<"Ã">>
163> X1.                      
212
164> <<X2/signed>> = <<-44>>.
<<"Ã">>
165> X2.
-44
166> <<X2/integer-signed-little>> = <<-44>>.
<<"Ã">>
167> X2.
-44
168> <<N:8/unit:1>> = <</2>>.
* 1: syntax error before: '/'
168> <<N:8/unit:1>> = <<72>>.
<<"H">>
169> N.
72
170> <<N:8>>.
<<"H">>
171> N.
72
172> <<N/integer>> 
172> .
<<"H">>
173> <<N/integer>> = <<72>>.
<<"H">>
174> <<Y:4/little-unit:8>> = <<72,0,0,0>>.
** exception error: no match of right hand side value <<72,0,0,0>>
175> Y.
5
176> f(Y).
ok
177> <<Y:4/little-unit:8>> = <<72,0,0,0>>.
<<72,0,0,0>>
178> Y.
72
179> N =:= Y.
true
180> 2#00100 = 2#00010 bsl 1.
4
181> 2#00100 = 2#00100 bsl 1.
** exception error: no match of right hand side value 8
182> 2#00100 = 2#00100 bsl 2.
** exception error: no match of right hand side value 16
183> 2#00100 = 2#00100 bsl 0.
4
184> 2#00100 = 2#00001 bsl 2.
4
185> 2#10101 = 2#10001 bor 2#00101.
21
186> 2#10001 bor 2#00101.          
21
187> <<2:2#10001 bor 2#00101>>.
* 1: syntax error before: 'bor'
187> <<2#10001 bor 2#00101>>.  
* 1: syntax error before: 'bor'
187> 2#10001 bor 2#00101.      
21
188> BinZ = 2#10001 bor 2#00101.
21
189> 2#BinZ
* 1: illegal integer
189> 2#BinZ.
* 1: illegal integer
189> BinZ
189> .
21
190> <<8:BinZ>>
190> .
<<0,0,8:5>>
191> <<2:BinZ>>
191> .
<<0,0,2:5>>
192> [X || <<X>> <= <<1,2,3,4,5,6>>, X rem 2 == 0]. 
[2,4,6]
193> Pixels.
<<213,45,132,64,76,32,76,0,0,234,32,15>>
194> RGB = [ {R, G, B} || <<R:8, G:8, B:8>> <= Pixels ].
[{213,45,132},{64,76,32},{76,0,0},{234,32,15}]
195> R.                                                 
213
196> G.
45
197> B.
132
198> f(R, G, B)
198> .
** exception error: undefined shell command f/3
199> f(R).     
ok
200> f(G).
ok
201> f(B).
ok
202> RGB = [ {R, G, B} || <<R:8, G:8, B:8>> <= Pixels ].
[{213,45,132},{64,76,32},{76,0,0},{234,32,15}]
203> R.
* 1: variable 'R' is unbound
204> RGB.
[{213,45,132},{64,76,32},{76,0,0},{234,32,15}]
205> << << R:8, G:8, B:8 >> || {R, G, B} <- RGB >>.
<<213,45,132,64,76,32,76,0,0,234,32,15>>
206> << << R:8, G:8, B:8 >> || {R, G, B} <- RGB >> = Pixels. 
* 1: illegal pattern
207> << << R:8, G:8, B:8 >> || {R, G, B} <- RGB >>.         
<<213,45,132,64,76,32,76,0,0,234,32,15>>
208> Pixels = << << R:8, G:8, B:8 >> || {R, G, B} <- RGB >>.
<<213,45,132,64,76,32,76,0,0,234,32,15>>
209> Pixels.
<<213,45,132,64,76,32,76,0,0,234,32,15>>
210> << << R:8, G:8, B:8 >> || {R, G, B} <- RGB >> =:= Pixels.
true
211> cd("workspace/erlang/").
/home/ktr/workspace/erlang
ok
212> cd("workspace/erlang/").
/home/ktr/workspace/erlang
ok
213> c(useless).
{ok,useless}
214> useless:add(7,11).
18
215> useless:hello().
Hello, World!
ok
216> useless:
add/2                greet_and_add_two/1  hello/0              
module_info/0        module_info/1        
216> useless:greet_and_add_two(21).
Hello, World!
23
217> c(useless, [debug_info]).     
{ok,useless}
218> useless:greet_and_add_two(21).
Hello, World!
23
219> c(useless, [debug_info, native]).
{ok,useless}
220> useless:greet_and_add_two(21).   
Hello, World!
23
221> useless:module_info()
221> .
[{module,useless},
 {exports,[{add,2},
           {hello,0},
           {greet_and_add_two,1},
           {module_info,0},
           {module_info,1}]},
 {attributes,[{vsn,[65834353802220399808625540798125688188]}]},
 {compile,[{options,[debug_info,native]},
           {version,"6.0.3"},
           {time,{2016,5,11,12,46,7}},
           {source,"/home/ktr/workspace/erlang/useless.erl"}]},
 {native,true},
 {md5,<<191,221,82,233,172,97,70,253,204,91,175,87,149,
        79,202,194>>}]
222> c(useless).                      
{ok,useless}
223> useless:module_info()
223> .
[{module,useless},
 {exports,[{add,2},
           {hello,0},
           {greet_and_add_two,1},
           {module_info,0},
           {module_info,1}]},
 {attributes,[{vsn,[65834353802220399808625540798125688188]}]},
 {compile,[{options,[]},
           {version,"6.0.3"},
           {time,{2016,5,11,12,48,31}},
           {source,"/home/ktr/workspace/erlang/useless.erl"}]},
 {native,false},
 {md5,<<49,135,60,62,246,1,106,184,207,136,193,36,99,203,
        197,124>>}]
224> c(useless, [debug_info, native]).
{ok,useless}
225> useless:module_info().           
[{module,useless},
 {exports,[{add,2},
           {hello,0},
           {greet_and_add_two,1},
           {module_info,0},
           {module_info,1}]},
 {attributes,[{vsn,[65834353802220399808625540798125688188]}]},
 {compile,[{options,[debug_info,native]},
           {version,"6.0.3"},
           {time,{2016,5,11,12,48,54}},
           {source,"/home/ktr/workspace/erlang/useless.erl"}]},
 {native,true},
 {md5,<<191,221,82,233,172,97,70,253,204,91,175,87,149,
        79,202,194>>}]
226> greet(male, Name) -> 
226> io:format("Hello, Mr ~s!", [Name]);
226> greet(female, Name) -> io:format("Hello, Mrs. ~s!", [Name]);
226> greet(_, Name) -> io:format("Hello, ~s!", [Name]);          
226> .
* 1: syntax error before: '->'
226> greet(_, Name) -> io:format("Hello, ~s!", [Name]).
* 1: syntax error before: '->'
226> 
226> .
* 2: syntax error before: '.'
226> greet(_, Name) -> io:format("Hello, ~s!", [Name]).
* 1: syntax error before: '->'
226> f(greet).
** exception error: no function clause matching call to f/1
227> greet().
** exception error: undefined shell command greet/0
228> greet(male, Name) ->                                        
228> io:format("Hello, Mr ~s!", [Name]);                         
228> greet(female, Name) -> io:format("Hello, Mrs. ~s!", [Name]);
228> greet(_, Name) -> io:format("Hello, ~s!", [Name]).          
* 1: syntax error before: '->'
228> greet(_, "Opa").
* 1: variable '_' is unbound
229> greet("Opa").   
** exception error: undefined shell command greet/1
230> greet(male, "Opa").
** exception error: undefined shell command greet/2
231> greet(male, Name) ->
231> io:format("Hello, Mr ~s!", [Name]);
231> greet(female, Name) ->
231> io:format("Hello, Mrs ~s!", [Name]);
231> greet(_, Name) ->
231> io:format("Hello, ~s!", [Name]).
* 1: syntax error before: '->'
231> greet(_, Name) ->               
231> io:format("Hello, ~s!", [Name]);
231> .
* 1: syntax error before: '->'
231> greet(male, Name) ->
231> io:format("Hello, Mr. ~s!", [Name]);
231> greet(female, Name) ->
231> io:format("Hello, Mrs. ~s!", [Name]);
231> greet(_, Name) ->
231> io:format("Hello, ~s!", [Name]).
* 1: syntax error before: '->'
231> greet(male, Name) -> io:format("Hello, Mr. ~s!", [Name]).
* 1: syntax error before: '->'
231> male.
male
232> Name.
* 1: variable 'Name' is unbound
233> greet(male, Name) -> true.
* 1: syntax error before: '->'
233> greet(male, Theirname) -> true.
* 1: syntax error before: '->'
233> greet(Male, Theirname) -> true.
* 1: syntax error before: '->'
233> greeting(male, Name) -> true.     
* 1: syntax error before: '->'
233> hello() ->
233> io:format("Hello, World!").
* 1: syntax error before: '->'
233> hello()->                  
233> io:format("Hello, World!").
* 1: syntax error before: '->'
233> c(useless, [debug_info, native]).                           
{ok,useless}
234> useless:greet("Myself").
** exception error: undefined function useless:greet/1
235> useless:greet(_, "Myself").
* 1: variable '_' is unbound
236> useless:greet(female, "Myself").
Hello, Mrs. Myself!ok
237> io:format("~s~n", [<<"Hello">>])
237> .
Hello
ok
238> io:format("~p~n", [<<"Hello">>]).
<<"Hello">>
ok
239> io:format("~~~n", [<<"Hello">>]).
** exception error: bad argument
     in function  io:format/3
        called as io:format(<0.27.0>,"~~~n",[<<"Hello">>])
240> io:format("~f~n", [<<"Hello">>]).
** exception error: bad argument
     in function  io:format/3
        called as io:format(<0.27.0>,"~f~n",[<<"Hello">>])
241> io:format("~~~n").               
~
ok
242> io:format("~f~n", [4.0]).        
4.000000
ok
243> io:format("~f~n", [4]).  
** exception error: bad argument
     in function  io:format/3
        called as io:format(<0.27.0>,"~f~n",[4])
244> io:format("~30f~n", [4.0]).
                      4.000000
ok
245> io:format("~0f~n", [4.0]). 

ok
246> io:format("~10f~n", [4.0]).
  4.000000
ok
247> io:format("~20f~n", [4.0]).
            4.000000
ok
248> io:format("~30f~n", [4.0]).
                      4.000000
ok
249> io:format("~40f~n", [4.0]).
                                4.000000
ok
250> io:format("~45f~n", [4.0]).
                                     4.000000
ok
251> io:format("~50f~n", [4.0]).
                                          4.000000
ok
252> io:format("~60f~n", [4.0]).
                                                    4.000000
ok
253> io:format("~70f~n", [4.0]).
                                                              4.000000
ok
254> io:format("~80f~n", [4.0]).
                                                                        4.000000 
ok
255> io:format("~90f~n", [4.0]).
                                                                                  4.000000
ok
256> io:format("~81f~n", [4.0]).
                                                                         4.000000
ok
257> useless:greet(none, "Myself").   
Hello, Myself!ok
258> c(useless)                    
258> .
useless.erl:2: function greet/1 undefined
error
259> useless:greet(none, "Myself").
Hello, Myself!ok
260> c(functions).
{ok,functions}
261> head([1,2])
261> .
** exception error: undefined shell command head/1
262> functions:head([1,2]).
1
263> functions:head([1, 2, 3, 4, 5]).
1
264> c(functions).                   
{ok,functions}
265> functions:second([1, 2, 3, 4, 5]).
2
266> second([_,X|_]) -> X.
* 1: syntax error before: '->'
266> c(functions).
functions.erl:17: Warning: wrong number of arguments in format call
{ok,functions}
267> c(functions).
{ok,functions}
268> functions:valid_time({2011,09,06},{09,04,43})
268> .
** exception error: undefined function functions:valid_time/2
269> functions:valid_time({{2011,09,06},{09,04,43}}).
The Date tuple ({2011,9,6}) says today is: 2011/9/6/,
The time tuple ({9,4,43}) indicates: 9:4:43.
ok
270> c(functions).                                   
{ok,functions}
271> functions:valid_time({{2011,09,06},{09,04,43}}).
The Date tuple ({2011,9,6}) says today is: 2011/9/6,
The time tuple ({9,4,43}) indicates: 9:4:43.
ok
272> functions:valid_time({{2011,09,06},{09,04}}).   
Stop feeding me wrong data!
ok
273> c(what_the_if).
what_the_if.erl:11: Warning: no clause will ever match
what_the_if.erl:11: Warning: the guard for this clause evaluates to 'false'
{ok,what_the_if}
274> what_the_if:heh_fine()
274> .
** exception error: no true branch found when evaluating an if expression
     in function  what_the_if:heh_fine/0 (what_the_if.erl, line 11)
275> c(what_the_if).       
what_the_if.erl:17: syntax error before: succeed
error
276> c(what_the_if).
what_the_if.erl:19: syntax error before: does
error
277> c(what_the_if).
what_the_if.erl:11: Warning: no clause will ever match
what_the_if.erl:11: Warning: the guard for this clause evaluates to 'false'
what_the_if.erl:15: Warning: function oh_god/1 is unused
{ok,what_the_if}
278> what_the_if:oh_god(1).
** exception error: undefined function what_the_if:oh_god/1
279> c(what_the_if).       
what_the_if.erl:11: Warning: no clause will ever match
what_the_if.erl:11: Warning: the guard for this clause evaluates to 'false'
what_the_if.erl:15: Warning: function oh_god/1 is unused
{ok,what_the_if}
280> c(what_the_if).
what_the_if.erl:11: Warning: no clause will ever match
what_the_if.erl:11: Warning: the guard for this clause evaluates to 'false'
what_the_if.erl:15: Warning: function oh_god/1 is unused
{ok,what_the_if}
281> c(what_the_if).       
what_the_if.erl:11: Warning: no clause will ever match
what_the_if.erl:11: Warning: the guard for this clause evaluates to 'false'
{ok,what_the_if}
282> what_the_if:oh_god(1).
always_does
283> what_the_if:oh_god(2).
might_succeed
284> what_the_if:oh_god(3).
always_does
285> c(what_the_if).       
what_the_if.erl:29: syntax error before: '++'
error
286> c(what_the_if).
what_the_if.erl:11: Warning: no clause will ever match
what_the_if.erl:11: Warning: the guard for this clause evaluates to 'false'
what_the_if.erl:22: Warning: function help_me/1 is unused
{ok,what_the_if}
287> c(what_the_if).
what_the_if.erl:11: Warning: no clause will ever match
what_the_if.erl:11: Warning: the guard for this clause evaluates to 'false'
{ok,what_the_if}
288> what_the_if:help_me(dog).
{dog,"says bark!"}
289> what_the_if:help_me(it_hurts).
{it_hurts,"says fgdadfgna!"}
290> what_the_if:help_me("it hurts!").
{"it hurts!","says fgdadfgna!"}
291> c(what_the_if).                  
what_the_if.erl:11: Warning: no clause will ever match
what_the_if.erl:11: Warning: the guard for this clause evaluates to 'false'
{ok,what_the_if}
292> c(what_the_if).
what_the_if.erl:2: function insert/2 undefined
error
293> c(what_the_if).
what_the_if.erl:11: Warning: no clause will ever match
what_the_if.erl:11: Warning: the guard for this clause evaluates to 'false'
{ok,what_the_if}
294> c(cases).
cases.erl:4: syntax error before: insert
error
295> c(cases).
{ok,cases}
296> c(cases).
cases.erl:12: Warning: function beach/1 is unused
{ok,cases}
297> c(cases).
{ok,cases}
298> cases:beach({celsius, 25}).
favorable
299> cases:beach({celsius, 5}). 
'avoid beach'
300> cases:beach({celsius, -5}).
'avoid beach'
301> [1, 2, 3] + 1
301> .
** exception error: an error occurred when evaluating an arithmetic expression
     in operator  +/2
        called as [1,2,3] + 1
302> [1, 2, 3].   
[1,2,3]
303> [95, 96, 97].
"_`a"
304> [17, 96, 97].
[17,96,97]
305> [1, 96, 97]. 
[1,96,97]
306> 
